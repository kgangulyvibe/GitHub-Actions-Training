name: Hello World Workflow

# Workflow Trigger: This workflow runs on push and pull request events to the main branch
on:
  # Webhook events
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main
    
# Jobs: Define a set of jobs to be run as part of the workflow
jobs:
  hello-world-job:
    # Specify the runner environment
    runs-on: ubuntu-latest
    
    steps:
      # Step: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step: Print Hello World
      - name: Print Hello World
        run: echo "Hello, World!"
        
      # Step: Print current date and time
      - name: Print Date and Time
        run: date
      
      # Step: Print GitHub context information
      - name: Print GitHub Context
        run: echo "This is a GitHub Actions workflow running on ${{ github.runner.os }} for the repository ${{ github.repository }}."
        
      # Step: Set an output variable
      - name: Set Output Variable
        id: set-output
        run: echo "myOutput=Hello from the workflow!" >> $GITHUB_ENV
      
      # Step: Use the output variable
      - name: Use Output Variable
        run: echo "The output variable is $myOutput"
  
  matrix_job:
    name: Matrix
    runs-on: ${{ matrix.runner }}
    if: github.event.inputs.run_matrix == 'true'
    
    strategy:
      matrix: 
        node-version: [10, 12, 14]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
    
      - name: Display Node.js version
        run: node -v

      # Step: Conditional step
      - name: Conditional Step
        if: ${{ matrix.node-version == 14 }}
        run: echo "This runs only for Node.js version 14"
    
      # Step: Using secrets
      - name: Print Secret
        run: echo "The secret is ${{ secrets.TESTSECRET }}" # This will print the secret in the logs as plain text
        env: 
          MY_SECRET: ${{ secrets.TESTSECRET }} # This will set the secret as an environment variable
      # print the masked secret
      - name: Print Masked MY_SECRET
        run: echo "The masked secret is $MY_SECRET"
